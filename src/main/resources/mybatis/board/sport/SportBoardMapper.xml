<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nutrimate.nutrimatebackend.mapper.board.sport.SportBoardMapper">
	
	<!-- Create -->
	<insert id="insertBoard" parameterType="SportBoardDto">
		<selectKey order="BEFORE" keyProperty="boardId" resultType="int">
			SELECT seq_board.nextval
				FROM dual
		</selectKey>
		INSERT INTO board VALUES(#{boardId}, #{userId}, #{boardCategory}, #{boardTitle},
		#{boardContent}, DEFAULT, #{boardViewcount}, DEFAULT, DEFAULT, DEFAULT)
	</insert>
	<!-- 해시태그 추가 -->
	<select id="checkTagId" resultType="int">
		SELECT count(tag_id)
			FROM hashtag
			WHERE tag_name = #{tag}
	</select>
	<!-- checkTagId가 0이면(중복이 아니면) 실행 -->
	<insert id="insertTag" parameterType="SportBoardDto">
		INSERT INTO hashtag
			VALUES (seq_hashtag.nextval, #{tag})
	</insert>
	<!-- 게시글과 해시태그 연결 -->
	<insert id="insertHashtag" parameterType="SportBoardDto">
		INSERT INTO board_hashtag
			VALUES (#{boardId},
			        (SELECT tag_id
				         FROM hashtag
				         WHERE tag_name = #{tagName}))
	</insert>
	
	<!-- Read -->
	<select id="selectBoard" parameterType="int" resultType="SportBoardDto">
		SELECT b.*, coalesce(count(bl.board_id), 0) AS like_count, m.user_nick, 
		       s.map_paths, s.map_distances, s.map_center_lat, s.map_center_lng, s.map_zoom_level
			FROM board b
				     LEFT JOIN sportboard s ON b.board_id = s.board_id
				     LEFT JOIN boardlike bl ON b.board_id = bl.board_id
				     LEFT JOIN member m ON b.user_id = m.user_id
			WHERE b.board_id = #{boardId} AND b.deleted = 'N' AND m.deleted = 'N'
			GROUP BY s.board_id, b.board_id, b.user_id,
			         b.board_category, b.board_title, b.board_content,
			         b.board_thumbnail, b.board_viewcount, b.created_date,
			         b.deleted, b.blocked, m.user_nick,
			         s.map_paths, s.map_distances, s.map_center_lat, s.map_center_lng, s.map_zoom_level
	</select>
	<!-- 해당 글의 해시태그 가져오기 -->
	<select id="findHashtagsByBoardId" resultType="SportBoardDto">
		SELECT h.tag_name
			FROM hashtag h
				     INNER JOIN board_hashtag b
				                ON h.tag_id = b.tag_id
			WHERE b.board_id = #{boardId}
	</select>
	
	<select id="selectAllBoards" resultType="SportBoardDto">
		SELECT * FROM (
		SELECT b.*, rank() OVER (ORDER BY b.board_id) id_rank, 
		coalesce(count(bl.board_id), 0) AS like_count, m.user_nick,
		s.map_paths, s.map_distances, s.map_center_lat, s.map_center_lng, s.map_zoom_level,
		ROW_NUMBER() OVER (ORDER BY
		b.board_id DESC) rn
		FROM board b
		LEFT JOIN sportboard s ON b.board_id = s.board_id
		LEFT JOIN boardlike bl ON b.board_id = bl.board_id
		LEFT JOIN member m on b.user_id = m.user_id
		WHERE b.deleted = 'N' AND m.deleted = 'N' AND b.board_category = 'exercise'
		<if test="searchUser !=null">
			AND m.user_nick LIKE '%' || #{searchUser} || '%'
		</if>
		<if test="searchTitle !=null">
			AND b.board_title LIKE '%' || #{searchTitle} || '%'
		</if>
		<if test="searchContent !=null">
			AND b.board_content LIKE '%' || #{searchContent} || '%'
		</if>
		GROUP BY s.board_id, b.board_id, b.user_id,
		b.board_category, b.board_title, b.board_content,
		b.board_thumbnail, b.board_viewcount, b.created_date,
		b.deleted, b.blocked, m.user_nick,
		s.map_paths, s.map_distances, s.map_center_lat, s.map_center_lng, s.map_zoom_level
		ORDER BY b.board_id DESC
		) WHERE rn BETWEEN (#{pageNum} - 1) * #{pageSize} + 1 AND #{pageNum} * #{pageSize}
	</select>
	
	<!-- 해시태그로 글 검색 -->
	<select id="findBoardsByTagName" resultType="SportBoardDto">
		SELECT board_id
			FROM board
			WHERE deleted = 'N' AND blocked = 'N'
			  AND board_id IN (SELECT board_id
				                   FROM hashtag h
					                        RIGHT JOIN board_hashtag b
					                                   ON h.tag_id = b.tag_id
				                   WHERE tag_name = #{tagName})
	</select>
	
	<!-- Increase board viewcount -->
	<update id="updateBoardViewcount" parameterType="int">
		UPDATE board
		SET board_viewcount = board_viewcount + 1
			WHERE board_id = #{boardId}
	</update>
	
	<!-- Update -->
	<update id="updateBoard" parameterType="SportBoardDto">
		UPDATE board
		SET board_title = #{boardTitle},
		    board_content = #{boardContent}
			WHERE board_id = #{boardId}
	</update>
	<!-- 해당글의 해시태그 전부 삭제 -->
	<update id="updateHashtag" parameterType="SportBoardDto">
		DELETE
			FROM board_hashtag
			WHERE board_id = #{boardId}
	</update>
	<!-- 삭제 후 insertTag와 insertHashtag 사용하여 해시태그 추가 -->
	
	<!-- Delete -->
	<update id="deleteBoard" parameterType="int">
		UPDATE board
		SET deleted= 'Y'
			WHERE board_id = #{boardId}
	</update>
	
	<!-- Insert into sportboard -->
	<insert id="insertSportBoard">
		INSERT INTO sportboard
			VALUES (#{boardId}, #{mapPaths}, #{mapDistances}, #{mapCenterLat}, #{mapCenterLng}, #{mapZoomlevel})
	</insert>
	
	<!-- Update sportboard -->
	<update id="updateSportBoard">
		UPDATE sportboard
		SET map_paths = #{mapPaths}, map_distances = #{mapDistances}, 
			map_center_lat = #{mapCenterLat}, map_center_lng = #{mapCenterLng}, map_zoom_level = #{mapZoomlevel}
		WHERE board_id = #{boardId}
	</update>
	
	<!-- Count likes -->
	<select id="countLikes" resultType="int" parameterType="LikeDto">
		SELECT count(*)
			FROM boardlike
			WHERE board_id = #{boardId}
	</select>
	
	<!-- 좋아요 여부 확인 -->
	<select id="countLike" parameterType="LikeDto" resultType="int">
	    SELECT COUNT(*)
	    FROM boardlike
	    WHERE board_id = #{boardId} AND user_id = #{userId}
	</select>	
	
	<!-- 유저가 좋아요 누른지 확인(0일시 안누름) -->
	<select id="checkUserLike" resultType="int">
		SELECT count(like_id)
			FROM boardlike b
				     RIGHT JOIN board d
				                ON b.board_id = d.board_id
			WHERE b.user_id = #{userId} AND d.board_id = #{boardId}
	</select>
	
	<!-- Insert like -->
	<insert id="insertLike" parameterType="LikeDto">
		INSERT INTO boardlike (like_id, board_id, user_id, created_date)
		SELECT seq_like.nextval, #{boardId}, #{userId}, sysdate
			FROM dual
			WHERE NOT exists (SELECT 1
				                  FROM boardlike
				                  WHERE board_id = #{boardId} AND user_id = #{userId})
	</insert>
	
	<!-- Delete like -->
	<delete id="deleteLike" parameterType="LikeDto">
		DELETE
			FROM boardlike
			WHERE like_id = (SELECT like_id
				                 FROM boardlike
				                 WHERE user_id = #{userId} AND board_id = #{boardId})
	</delete>
	
	<!-- Previous board -->
	<select id="selectPrevBoard" parameterType="int" resultType="SportBoardDto">
		SELECT *
			FROM (SELECT b.*, coalesce(count(bl.board_id), 0) AS like_count, m.user_nick,
						s.map_paths, s.map_distances, s.map_center_lat, s.map_center_lng, s.map_zoom_level,
			             row_number() OVER (ORDER BY b.board_id DESC) AS rn
				      FROM board b
					           LEFT JOIN sportboard s ON b.board_id = s.board_id
					           LEFT JOIN boardlike bl ON b.board_id = bl.board_id
					           LEFT JOIN member m ON b.user_id = m.user_id
				      WHERE b.board_id &lt; #{boardId} AND b.deleted = 'N' AND m.deleted = 'N'
				      GROUP BY s.board_id, b.board_id, b.user_id,
				               b.board_category, b.board_title, b.board_content,
				               b.board_thumbnail, b.board_viewcount, b.created_date,
				               b.deleted, b.blocked, m.user_nick,
				               s.map_paths, s.map_distances, s.map_center_lat, s.map_center_lng, s.map_zoom_level)
			WHERE rn = 1
	</select>
	
	<!-- Next board -->
	<select id="selectNextBoard" parameterType="int" resultType="SportBoardDto">
		SELECT *
			FROM (SELECT b.*, coalesce(count(bl.board_id), 0) AS like_count, m.user_nick,
			s.map_paths, s.map_distances, s.map_center_lat, s.map_center_lng, s.map_zoom_level,
			             row_number() OVER (ORDER BY b.board_id ASC) AS rn
				      FROM board b
					           LEFT JOIN sportboard s ON b.board_id = s.board_id
					           LEFT JOIN boardlike bl ON b.board_id = bl.board_id
					           LEFT JOIN member m ON b.user_id = m.user_id
				      WHERE b.board_id &gt; #{boardId} AND b.deleted = 'N' AND m.deleted = 'N'
				      GROUP BY s.board_id, b.board_id, b.user_id,
				               b.board_category, b.board_title, b.board_content,
				               b.board_thumbnail, b.board_viewcount, b.created_date,
				               b.deleted, b.blocked, m.user_nick,
				               s.map_paths, s.map_distances, s.map_center_lat, s.map_center_lng, s.map_zoom_level)
			WHERE rn = 1
	</select>
	
	<!-- Count pages -->
	<select id="countBoards" resultType="int">
		SELECT count(DISTINCT b.board_id)
			FROM board b
				     LEFT JOIN member m ON b.user_id = m.user_id AND b.board_category = 'exercise'
			WHERE b.deleted = 'N' AND m.deleted = 'N'
	</select>
	
	<!-- 북마크 저장여부 확인 -->
	<select id="countBookmarks" parameterType="com.nutrimate.nutrimatebackend.model.board.sport.BookmarkDto" resultType="int">
	    SELECT COUNT(*)
	    FROM BOOKMARK
	    WHERE board_id = #{boardId} AND user_id = #{userId}
	</select>
	
	<!-- Insert bookmark -->
	<insert id="insertBookmark" parameterType="BookmarkDto">
		INSERT INTO bookmark (user_id, board_id, created_date)
		SELECT #{userId}, #{boardId}, sysdate
			FROM dual
			WHERE NOT exists (SELECT 1
				                  FROM bookmark
				                  WHERE board_id = #{boardId} AND user_id = #{userId})
	</insert>
	
	<!-- Delete bookmark -->
	<delete id="deleteBookmark" parameterType="BookmarkDto">
		DELETE
			FROM bookmark
			WHERE board_id = #{boardId} AND user_id = #{userId}
	</delete>
	
</mapper>
